name: TTAlgo build
run-name: TTAlgo build ${{ inputs.releaseVersion }}
on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version'
        type: string
      isPreRelease:
        description: 'PreRelease'
        type: boolean
        required: true
        default: false
env:
  ARTIFACT_NAME: 'TTAlgo Release'
  BUILD_OUTPUT_FOLDER: build.output

jobs:
  build:
    runs-on: self-hosted
    env:
      BuildScriptPath: ./build.ps1
    steps:
    - uses: actions/checkout@v3

    - name: Run PowerShell script
      run: ${{ env.BuildScriptPath }} --Version=${{ inputs.releaseVersion }} --SkipTests=False --ArtifactsDirName=${{ env.BUILD_OUTPUT_FOLDER }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.BUILD_OUTPUT_FOLDER }}

  create-tag:
    if: ${{ inputs.releaseVersion != '' }}
    runs-on: ubuntu-latest
    needs: build
    outputs:
      BUILD_VERSION: ${{ steps.save-version.outputs.version }}
      BUILD_TAG: ${{ steps.save-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - id: save-version
        name: Create version
        run: echo "version=v${{ inputs.releaseVersion }}" >> $GITHUB_OUTPUT

      - id: save-tag
        name: Create tag
        run: echo "tag=release-v${{ inputs.releaseVersion }}" >> $GITHUB_OUTPUT

      - name: Push tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.save-tag.outputs.tag }}
          message: "Release ${{ steps.save-tag.outputs.tag }}"
          force_push_tag: true

  create-release:
    runs-on: ubuntu-latest
    needs: create-tag
    env:
      ReleaseNote: "ReleaseNote.md"
      GithubToken: ${{ secrets.ReleaseToken }}
    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.BUILD_OUTPUT_FOLDER }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ needs.create-tag.outputs.BUILD_TAG }}
          tag: ${{ needs.create-tag.outputs.BUILD_TAG }}
          token: ${{ env.GithubToken }}
          artifacts: ${{ env.BUILD_OUTPUT_FOLDER }}/*.zip, ${{ env.BUILD_OUTPUT_FOLDER }}/*.exe, ${{ env.BUILD_OUTPUT_FOLDER }}/*.vsix
          bodyFile: ${{ env.ReleaseNote }}
          prerelease: ${{ inputs.isPreRelease }}
          allowUpdates: true